#!/bin/bash
# CC0, Wei-Lun Chao <bluebat@member.fsf.org>, 2017
function randompiece {
  BOARD="$1"
  PIECES="KAAEERRHHCCPPPPPkaaeerrhhccppppp"
  i=0
  while [ "$i" -lt ${#BOARD} ] ; do
    PIECE="${BOARD:$i:1}"
    PIECES="${PIECES/$PIECE/}"
    let i++
  done
  i=${#PIECES}
  i=$((RANDOM%i))
  echo "${PIECES:$i:1}"
}

POSXS="ABCDEFGHJ"
POSx=${POSXS%%${ARENA_MOVE:0:1}*}
POSX1=${#POSx} # x position of piece1 0..8
POSx=${POSXS%%${ARENA_MOVE:2:1}*}
POSX2=${#POSx} # x position of piece2 0..8
[ $POSX1 -eq 9 -o $POSX2 -eq 9 ] && exit 1
POSY1=$((${ARENA_MOVE:1:1}-1)) # y position of piece1 0..4
POSY2=$((${ARENA_MOVE:3:1}-1)) # y position of piece2 0..4
[ $POSY1 -gt 4 -o $POSY2 -gt 4 ] && exit 1
DIST=$(((POSX1-POSX2)*(POSX1-POSX2)+(POSY1-POSY2)*(POSY1-POSY2)))

if [ ${#ARENA_MOVE} -eq 4 ] ; then
  SEQ1=$((POSY1*9+POSX1))
  [ $SEQ1 -lt 0 -o $SEQ1 -gt 44 ] && exit 1
  PIECE1=${ARENA_BOARD:SEQ1:1}
  SEQ2=$((POSY2*9+POSX2))
  [ $SEQ2 -lt 0 -o $SEQ2 -gt 44 ] && exit 1
  PIECE2=${ARENA_BOARD:SEQ2:1}
else
  exit 1
fi

[ $PIECE1 = _ ] && exit 1
if [ "$SEQ1" -eq "$SEQ2" ] ; then
  [ "${PIECE1}" != "@" ] && exit 1
  ARENA_BOARD="${ARENA_BOARD:0:$SEQ1}"`randompiece ${ARENA_BOARD}`"${ARENA_BOARD:$SEQ1+1}"
  echo "$ARENA_BOARD"
  exit 0
fi

[ "$PIECE1" = "@" -o "$PIECE2" = "@" ] && exit 1
[ $((ARENA_MOVENO%3)) -eq 1 ] && TURN=$ARENA_COLOR1 # get color turn
[ $((ARENA_MOVENO%3)) -eq 2 ] && TURN=$ARENA_COLOR2
[ $((ARENA_MOVENO%3)) -eq 0 ] && TURN=$ARENA_COLOR3
PIECESRED="AERHC"
PIECESBLACK="aerhc"
PIECESBLUE="KkPp"
if [ "$TURN" = Red ] ; then
  [ $PIECESRED = ${PIECESRED/$PIECE1/} ] && exit 1
  [ $PIECESRED != ${PIECESRED/$PIECE2/} ] && exit 1
elif [ "$TURN" = Black ] ; then
  [ $PIECESBLACK = ${PIECESBLACK/$PIECE1/} ] && exit 1
  [ $PIECESBLACK != ${PIECESBLACK/$PIECE2/} ] && exit 1
elif [ "$TURN" = Blue ] ; then
  [ $PIECESBLUE = ${PIECESBLUE/$PIECE1/} ] && exit 1
  [ $PIECESBLUE != ${PIECESBLUE/$PIECE2/} ] && exit 1
else
  exit 1
fi

case $PIECE1 in
  A|a)
    [ $DIST -ne 2 ] && exit 1
    ;;
  E|e) 
    [ $DIST -ne 8 ] && exit 1
    ;;
  K|k|R|r) 
    if [ $POSX1 = $POSX2 ] ; then
      if [ $POSY1 -lt $POSY2 ] ; then
        POS=$((POSY1+1))
        while [ $POS -lt $POSY2 ] ; do
          SEQ=$((POS*9+POSX1))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && exit 1
          let POS++
        done
      else
        POS=$((POSY1-1))
        while [ $POS -gt $POSY2 ] ; do
          SEQ=$((POS*9+POSX1))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && exit 1
          let POS--
        done       
      fi
    elif [ $POSY1 = $POSY2 ] ; then
      if [ $POSX1 -lt $POSX2 ] ; then
        POS=$((POSX1+1))
        while [ $POS -lt $POSX2 ] ; do
          SEQ=$((POSY1*9+POS))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && exit 1
          let POS++
        done
      else
        POS=$((POSX1-1))
        while [ $POS -gt $POSX2 ] ; do
          SEQ=$((POSY1*9+POS))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && exit 1
          let POS--
        done
      fi     
    else
      exit 1
    fi
    ;;
  H|h) 
    [ $DIST -ne 5 ] && exit 1
    ;;
  C|c) 
    MIDDLE=0
    if [ $POSX1 = $POSX2 ] ; then
      if [ $POSY1 -lt $POSY2 ] ; then
        POS=$((POSY1+1))
        while [ $POS -lt $POSY2 ] ; do
          SEQ=$((POS*9+POSX1))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && let MIDDLE++
          let POS++
        done
      else
        POS=$((POSY1-1))
        while [ $POS -gt $POSY2 ] ; do
          SEQ=$((POS*9+POSX1))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && let MIDDLE++
          let POS--
        done       
      fi
    elif [ $POSY1 = $POSY2 ] ; then
      if [ $POSX1 -lt $POSX2 ] ; then
        POS=$((POSX1+1))
        while [ $POS -lt $POSX2 ] ; do
          SEQ=$((POSY1*9+POS))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && let MIDDLE++
          let POS++
        done
      else
        POS=$((POSX1-1))
        while [ $POS -gt $POSX2 ] ; do
          SEQ=$((POSY1*9+POS))
          [ ${ARENA_BOARD:SEQ:1} != _ ] && let MIDDLE++
          let POS--
        done
      fi     
    else
      exit 1
    fi
    if [ $PIECE2 = _ ] ; then
      [ $MIDDLE -ne 0 ] && exit 1
    else
      [ $MIDDLE -ne 1 ] && exit 1
    fi
    ;;
  P|p) 
    [ $DIST -ne 1 ] && exit 1
    ;;
esac

ARENA_BOARD="${ARENA_BOARD:0:SEQ1}_${ARENA_BOARD:SEQ1+1}"
[ $PIECE2 != _ ] && ARENA_BOARD="${ARENA_BOARD:0:SEQ2}${PIECE1}${ARENA_BOARD:SEQ2+1}${PIECE2}" || ARENA_BOARD="${ARENA_BOARD:0:SEQ2}${PIECE1}${ARENA_BOARD:SEQ2+1}"

echo "$ARENA_BOARD"
